#File detailing the helper functions
#helper functions

def unit_vector(vector):
    """ Returns the unit vector of the vector.  """
    #print(vecotr)
    return vector / np.linalg.norm(vector)

def angle_between(v1, v2):
    """ 
    Returns the angle in radians between vectors 'v1' and 'v2'::
    """
    v1_u = unit_vector(v1)
    print(v1_u)
    v2_u = unit_vector(v2)
    print(v2_u)
    return np.arccos(np.clip(np.dot(v1_u, v2_u), -1.0, 1.0))


def bisection_search(f,a=0,b=math.pi/4,N=7):
	"""
	Returns x: an approximation of f(x) = 0 when f(a)<0 and f(b)>0 after N iterations

	a,b default set to 0 and 45 degrees in order to find the angle of rotation for boundary set calculations

	Default iterations N=7 chosen to ensure an error of below 0.01 according to the formula for complexity (found online)
	"""
	print(f(a),f(b))
	assert f(a)*f(b) < 0, "Invalid Bounds"
	
	a_n = a
	b_n = b
	
	for n in range(1,N+1):
		m_n = (a_n + b_n)/2
		f_m_n = f(m_n)
		if f(a_n)*f_m_n < 0:
			a_n = a_n
			b_n = m_n
		
		elif f(b_n)*f_m_n < 0:
			a_n = m_n
			b_n = b_n
		
		elif f_m_n == 0:
			print("Found exact solution.")
			return m_n
		
		else:
			print("Bisection method fails.")
		
			return None
	return (a_n + b_n)/2


def rotate(v,theta):
	"""
	Rotates 2-dimensional numpy array v by theta (radians) clockwise and returns the new vector
	Use the rotation matrix to help in calculations
	"""
	rot_matrix = np.array([[math.cos(theta),-math.sin(theta)],[math.sin(theta),math.cos(theta)]])
	return np.matmul(rot_matrix,v)